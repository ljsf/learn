react-native + redux
需求分析：
软件开发流程：

需求分析--->UI界面设计--->编码开发---->测试---->上线
1.需求分析
为什么要开发这款App
  Trending客户端
  能搜索GitHub上的项目
  有离线缓存
  扩展功能
  支持50多种编程语言 --> 收藏---分享
  订阅-->取消 
  排序
  多彩主题  统计的功能
 
 技术分析：
  基础部分：
  布局：FlexBox Style/css
  组件：react-navigation
  列表： FlatList
  RN组件：react-native-splash-screen react-native-vector-icons react-native-code-push
  Native组件： 统计和分享， 分享， 第三方登录
  自定义组件：SafeAreaViewPlus由于全面屏
  
  网络和存储： 
    AsyncStorage 
    Fetch 
    离线缓存框架
  
  框架：
    Redux react-redux redux-thunk react-navigation-redux-helpers
    Flux
    
   高级：
    Native Modules: 图片裁剪  统计SDK 分享SDK
    react-native混合开发 RN+Android RN+ios混合开发
    全面屏设配指南： ios Android
    react-native更新升级 手动更新 react-native-git-upgrade
   
   打包发布与更新：
    CodePush热更新
    Android打包发布
    iOS打包发布
    
    技术栈：
    
  
  项目目录：
    js：
      action
      reducer
      store
      
      model：存放模型
      common： 项目的公共的model
      expand： 放dao  DAO(Data Access Object) 数据访问对象
      navigator： 项目导航框架
      page：
      res： 项目遇到的js文件，js数据，全局的样式
      util
      App.js是项目的入口
      
 
 react-navigation 3.x
  createAppContainer 必须要使用
  navigationOptions 改成defaultNavigationOptions
  
  搭建App的导航框架： 是所有App打开的入口 动态的修改App
  
  注：所有的react-navigation组件如果要放入 组件中就必须要用createAppContainer中注册才行 
  
  基本上都可以用箭头函数来代替类 <Text></Text>可以里面可以使用onPress
  
  console.disableYellowBox = true 可以禁止黄匡的警告
  
  const不能出现重新的变量，很重要，负责会出错，screen这里和哪里不要重复名字
  Favorite: {
    screen: FavoritePage  // 不能名字一样
  }
  
  
  npm install --save react-navigation-tabs
  
  注代码声明的时候还要分前后顺序，如果， 在用到的时候，之后声明会无效，必须要在，遇到之前声明
  
======================redux============================================================
加入redux来使用项目
什么是redux： 是JavaScript转态容器，提供预测状态栏view----dispatch-->action---store---state
什么是异步数据流

单一数据源
State 是只读的
使用纯函数来执行修改

Action创建函数：就是生成action方法
function addToto(text){
  return {
    type: ADD_TODO,
    text
  }
}

reducer是根据action修改state变成下一个state，记住actions只能描述有事情发生的事实
不要做这些
修改传入的参数：
执行有副作用的操作，如API请求和路由跳转，
调用非纯函数，如Date.now() 或者，Math.random()

Object.assign()


维持state
提供getState()方法获取state
dispatch(action)方法更新state
高级Action
异步action  redux-thunk 异步action，
异步数据流：
redux
react-redux： 
redux-devtools： Redux开发工具支持热加载上使用redux开发的一个用户react上redux库
redux-thunk： 实现action异步的middleware
redux-persist： 支持store本地持久化
redux-observable: 实现可取消action

<Provider>组件： 这个组件需要包裹在整个组件树的最外层，这个组件让根组件的所有字孙组件能够轻松的使用connect()方法绑定store
connect(): 这是react-redux提供一个方法，如果一个组件需要响应状态的变化，就把自己作为参数传递给connect()的结果，connect()方法会处理store绑定的细节，并通过selector确定该绑定store中那一部分的数据
selector： 这是你自己编写的一个函数，这个函数声明了你的组件需要整个store那一部分数据作为组件的props
dispatch： 每当你想要改变应用中的状态时， 你就要dispatch一个action，这也是唯一改变状态的方法

react-navigation中使用redux
安装 npm install --save react-navigation-redux-helpers
```
import {}
```

import {
  createReduxContainer,
  createReactNavigationReduxMiddleware,
  createNavigationReducer,
} from 'react-navigation-redux-helpers';

1.reduxifyNavigator被改名为createReduxContainer，
  \import {createReactNavigationReduxMiddleware, reduxifyNavigator} from 'react-navigation-redux-helpers';
  //改为
  import {createReactNavigationReduxMiddleware, createReduxContainer} from 'react-navigation-redux-helpers';
  ...
  const AppWithNavigationState = reduxifyNavigator(RootNavigator, 'root');
  //改为
  const AppWithNavigationState = createReduxContainer(RootNavigator, 'root');
2.createReactNavigationReduxMiddleware的参数顺序发生了变化：
   export const middleware = createReactNavigationReduxMiddleware(
      'root',
      state => state.nav
  );
  //改为
  export const middleware = createReactNavigationReduxMiddleware(
      state => state.nav,
      'root'
  );
  
  配置reducer
  

