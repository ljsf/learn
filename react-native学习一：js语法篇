const arr = [
 'string',
 42,
 'function() {console.log('hello')}
]
// 运行
arr[2]()

for  (let i = 0; i < arr.length: i++) {
  console.log(arr[i])
}

判断类型
const x = 42;
console.log(typeof x) // number
typeof null // object类型
var a String(x) // a = "42"

boolean 是false的有：
  1.null
  2.undefined
  3.false,
  4.+0,-0, NaN
  5.
boolean中true的有：
  {}
  []
  evertything else

类型：undefined, null, boolean, number, string, (symbol)

const o = new Object();
o.firstName = "Jordan";
o.lastName = 'Hayashi';
o.isTeaching = true;
o.greet = function() {
  console.log('hi!')
}
const o2 = {}
consot o2 = {

}

以上都是对象方法，都是一样的 在js中const创建的对象时是看看呀修改里面的内容，但是常量值不可以的
  const o = {
    a: 'a',
    b: 'b',
    obj: {
        key: 'key',
      },
  };
  
  o.a = 'new_a' // 这个是对的
  const PI = 3.14;
  PI = 3.15 // 这个是错的
  
  const o2 = o;
  o.a = 'new value'
  console.log(o2.a) // new value
  
  对象时存储在一个位置的，就是指针指向的问题。。。。。
  
  那么现在这么实现获得相同的值，但是，修改不一样？
    第一种方法：
    const o2 = {
      a: 'a',
      b: 'b',
      obj: {
        key: 'key',
      },
    };
    第二种方法:
    const o2 = Object.assign({}, o)
    第三种方法：
    const o2 = {...o}
    
  // deep copy
  function deepCopy(obj) {
    // check if vals are objects
    // if so, copy that object (deep copy)
    // else return the value
    const keys = Object.keys(obj)       
    const newObject = {}
    for (let i = 0; i < keys.length; i++) {
      if (typeof obj[keys[i]] === 'object') {
        newObject[key] = deepCopy(obj[key])
      } else {
        newObject[key] = obj[key]
      }
    }
    return Object.assign({}, obj)
  }
  
  
Object.keys
// Object.keys  定义：返回一个对象可枚举属性的字符串数组； Object.getOwnPropertyNames  定义：返回一个对象可枚举、不可枚举属性的名称
  // simple array
  var arr = ['a', 'b', 'c'];
  console.log(Object.keys(arr)); // console: ['0', '1', '2']

  // array like object
  var obj = { 0: 'a', 1: 'b', 2: 'c' };
  console.log(Object.keys(obj)); // console: ['0', '1', '2']

  // array like object with random key ordering
  var anObj = { 100: 'a', 2: 'b', 7: 'c' };
  console.log(Object.keys(anObj)); // console: ['2', '7', '100']

  // getFoo is a property which isn't enumerable
  var myObj = Object.create({}, {
    getFoo: {
      value: function () { return this.foo; }
    } 
  });
  myObj.foo = 1;
  console.log(Object.keys(myObj)); // console: ['foo']
  
  const arr = []
  arr.push('value')
 arr.__proto__可以显示内置方法
 
 const num = 42;
 num.toString()   // "42"
 
 
 ======================scope=============================
 const obj = {}
 obj = {} //错误的，因为这是常量，这是建立了一个新的存储位置
 obj.a = 'a' // 这是对的,因为他存储的位置没有变化，只是往存储位置加入了数值而已，const针对的是存储位置的变化
 
 const thisIsAConst = 50;
 // thisIsAConst++  // error
 
 const constObj = {}
 constObjt.a = 'a'
 let thisIsALet = 51
 thisIsALet = 50
 
 // let thisIsALet = 51 //errors 不能重复声明
 
 var thisIsAVar = 50
 thisIsAVar = 51
 var thisIsAVar = 'new value!'  // 完全可以覆盖前面的变量 
 
 // Hoisting
 
 function thisIsHoisted() {
  console.log('this is a function declared at the bottom of a filled')
 } // 你可以在上面调用他，他会被提升
 
 const thisIsNotHoisted = function() {
  console.log('should this be hoisted?')
 } // 没有被提升 let也是没有被提升 perferenceError

 var thisIsNotHoisted = func.. // 用var声明的变量会被提升，这个时候在这个函数前，声明的是var thisIsNotHoisted = undefined 所以是typeError
 
 为什么会出现这样的情况：在执行代码，他会读取所有的代码 读取的时候会var，然后在执行，
 es6 之后完全可以用let和const来代替var了，可以不使用var了
 
 
 The Global Object  全局对象
 在浏览器中 window就是全局变量
 window.clear()  // 就是清除窗口，全局变量 也可以用 consol. clear()
 
 node是全局变量时 global
  
=====================closures 闭包==============================
function makeFunctionArray() {
 const arr = []
 
 for (var i = 0; i < 5; i ++) {
  arr.push(function() {console.log(i) })
 }
 return arr
}
const arr = makeFunctionArray()

arr[0]()  // 打印出5 因为数组存的不是i而是function(){console.log(i)} 所有，打印出的数字和i有关系，这个时候，你如果用var i = 6则打印出的是6
所有最好是使用let要好点，let i只是起一个局部变量的作用，用完就马上重置
因为代码是全部读完以后才执行，那么用var怎么才能打印出正确答案，只能是用IIFE立刻执行

 每个let只在局部中有作用，每次用完都会被重置，JavaScript中有计数器是专门计数使用的
 
 IIFE: 立即表达式
 
 first-classes-function
  map filter reduce
  
 map 映射 把一个东西映射到另一个值
  const x = [0,1,2,3]
  function addOne(number) {return number + 1}
  addOne(1)  // 2
  x.map(addOne) // [1,2,3,4]
  
 filter : 过滤器
 
 function isGreaterThanOne(num) {return num > 1}
 isGreaterThanOne(100) // true
 isGreaterThanOne(1) // false
 x.filter(isGreaterThanOne) // [2.3]
 
 reduce: 
 function add(x, y) { return x + y}
 x.reduce(add) // 6
 
 for example  ---map
 function map(arr, fn) {
  const newArr = []
  for (let i = 0; i < arr.length; i++) {
   let val = arr[i]
   new Arr.push(fn(val))
  }
  return newArr
 }
 map(x,addOne)
 
 ========================async 异步=========================
 function printOne() {
  console.log('one')
 }
 
 function printTwo() {
  console.log('two')
 }
 
 function printThree() {
  console.log('three')
 }
 
 setTimeout(printOne, 1000)
 setTimeout(printTwo, 0)  // 不加括号
 printThree()
 
 // three two one
 把时间放到api中到列队在到堆栈中执行
 把函数放到api中1秒中，然后放入queue（列队中），然后列队放入堆栈中运行
 
 function recurse() {
  console.log('recursion')
  return recurse()
 }
 
 recurse()
 
 --callback
  function doSomething(callback) {
   callback(1)
  }
  doSomething(console.log)  // 1
  
  function doSomethingAsync(callback) {
   setTimeout(function() {callback(1)}, 1000)
  }
  doSomethingAsync(console.log)  // 1
  
  
Promise： 在异步操作中，最终都会执行、
then中，只要有错误，就一直往下一个then运行，直到找到catch为止
 const url = ''
 
 fetch(url)
 .then(function(res) {
  return res.json()
 })
 .then(function(json) {
  return ({
   importantData: json.importantData,
  })
 })
 .then(function(data) {
  
 })
 .catch(function(err) {
  
 })
 
 
 ======callback 回调函数=======
 解释：A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.
 回调函数是一个函数，它作为参数传递给另一个函数，并在父函数完成后执行。
 for example：
  function doSomething(msg, callback){
   alert(msg);
   if(typeof callback ==== "function") callback();
  }
  doSomething("回调函数", function(){
   alert("匿名函数实现回调!");
  })

 回调函数：回调与同步、异步并没有直接的联系，回调只是一种实现方式，既可以有同步回调，也可以有异步回调
 
 .then==============
 then的意思是，上一个执行完之后，执行下一个
 xhrCall()
  .then(S1, E1) //P1
  .then(S2, E2) //P2
  .then(S3, E3) //P3
  
 
 =========this=========
const person = {
 name: 'jordan',
 greet: function() {console.log('hrllo' + this.name)}
}

person.greet() //'hello jordan'

const greet = person.greet

greet() // 'hello undefined' 因为this是指针有关系，对象的指向就是this的方向
// this 是指向内存的方向，
const friend = {
 name: 'david',
}
friend.greet = person.greet
friend.greet()  // 'hello david' this.name = 'yowon' 在node中可以执行,但是在一个文件中不想
const greet = person.greet // const greet = person.greet.bind({name: 'this is a bound object'}) //
person.greet.call({name:.....}) // 
person.greet.apply({name:....}) //
greet() // 'hello undefined'


=======DOM======document-object-model=======================
TREE
doc===> html=====>head/body
HTML文件就是一个DOM模型，有很多的节点组成
可以用JavaScript来扩展dom
HTML DOM 定义了访问和操作 HTML 文档的标准
DOM： DOM把整个页面看成一个多层次的节点结构，HTML和XML页面的每个节点组成都是某种类型的节点，执行节点包含不同的数据类型

// Assignment: 任务的意思
