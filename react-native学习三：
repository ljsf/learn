react-native：是单线程操作

UI---------调用----------JS
div-----> View
span -----> Text
button -----> Button
ScrollView


Style:
  css
 style = {{}} 外面一个是js代码的意思，第二个里面是对象
 
StyleSheet.create()

Button
Touchable
Switch

Flexbox:
  flex: 1,
 
 Fifecycle
 Mount --->Update-----Unmount
 
 Mount constructor(porps)
 
 render() the meat of a component
 
 React组件生命周期：
```
1.生命周期三个状态：
	Mounting：已插入真实的DOM
	Updating：正在被重新渲染
	Unmounting：以被移除DOM
2.生命周期：
	componentWillMount：在渲染前调用，在客服端也在服务端
	componentDidMount: 在第一次渲染后调用，只在客户端。之后组件已经生成对应的DOM结构，可以通过this.DOMNode()来进行访问
	componentWillReceiveProps在组件接收到一个新的props时被调用，这个方法在初始化render时不会被调用
```	
用计数器来验证，生命周期

Mount： constructor()----> render()----> componentDidMount()
class life extends Component{
 constructor() {
  super()
  this.state = {
   count: 0
  }
 }
 componentDidMount() {
  setInterval(() => this.inc(), 1000)	// 调用方法
 }
 or with
 componentDidMount() {
  setInterval(this.inc(), 1000)	// 调用变量
 }
 inc() // this.inc() 这个时候this会丢失，只会调用一次,所有用箭头函数来调用
  this.setState(prevState => ({
   count: prevState.count + 1
  }))
 }
 // or with 可以直接调用inc	this.inc()
 inc = () => {
  this.setState(prevState => ({
   coount: prevState.count + 1
  }))
 }
}

update：
nextProps nextState
componentDidUpdate

方法有：
 componentWillReceiveProps(nextProps)	
 shouldComponentUpdate(nextProps, nextState)	// 返回是true和false，默认只要有数字是true，0是false 是决定更新还是不跟新
 render()
 componentDidUpdate(prevProps, prevState)

Unmount：
componentWillUnmount() {
 clearInterval(this.interval)	
} 卸载程序中就会有，防止内存泄漏


 
